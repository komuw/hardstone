grep -rsIin "hello" ~/mystuff
rg -inLp --hidden "hello" /path/to/dir/    # ripgrep
rga -inLp --hidden "hello" /path/to/dir/   # ripgrep-all, also searches pdf, .doc etc
ls -lsha ~/
dpkg --get-selections | grep -v deinstall #list all installed packages/programs
ps auxwwwww | grep "vlc"
pstree -pal
fuser -k 8080/tcp #kill whatever is using that port
sed "s/day/night/g" <cool.txt >new.txt #replace day with night. `g` replaces multiple occurences in same line
curl --no-buffer -vkIL https://google.com
screen -ls
screen -S hello
screen -r 2049672 # ctrl-A-D
code . &
netstat -tunapl | grep -i 'listen'
lsof -i tcp | grep -i 'listen'
ss --listening --processes --tcp
ss --listening --processes --tcp --udp
mtr -r -w --show-ips example.com
strace -TYyytvx -s 1000 --stack-traces -p <pid> -o stracer.log

# ssh
ssh-add ~/.ssh/id_rsa #to load ua new id to the agent
ssh-add -l

# git
git co -b some-branch
git br -dD some-branch
git remote -v
git checkout main -- /some/path/app.js /path/cool.py
git reset --hard HEAD~1
git reset --hard some-commit
git push --all -u --follow-tags
git push origin some-branch-name --force
git log -i -Shello # git search contents of all git commits
git log -i -Shello --patch # show commit together with the commit contents
git log -i --reverse -S'func Backup' --patch # search contents but in reverse(oldest first).
git log -i -Shello --pickaxe-regex # Treat the <string> given to -S as regex
git log -i -G<regex_term> --patch # Like -S --pickaxe-regex but sometimes better
git log -i -Shello --patch -- somePath/ ':(exclude)*vendor*' # exclude a certain directory/file
git log -L :funcName:file/path.go # show commit history of a function, including diff
git rebase main --interactive # squash commits
git reset --soft $(git merge-base main HEAD) # squash commits
git stash list
git stash push -m myStash /some/path/app.js /path/cool.py
git stash apply stash@{0}
git stash show -p stash@{0} # show contents of a stash
git diff --diff-filter=d --name-only origin/main | grep '.py$'
git diff --diff-filter=d --name-only origin/main | grep '.go$' | xargs gofmt -w -s && \
git diff --diff-filter=d --name-only origin/main | grep '.go$' | xargs gofumpt -extra -lang 1.16 -w && \
git diff --diff-filter=d --name-only origin/main | grep '.go$' | xargs goimports -w -local github.com/komuw/meli/image,github.com/komuw/meli/volume

git remote add mine git@github.com:komuw/delve.git
git push mine
git co mine issues/2249-A
git pull mine issues/2249-A\
git fetch mine

# docker
docker ps -aq | xargs docker rm -f
docker build -t komuw/smpp:v1.1 .
docker run -it tyk-go1.16:latest sh
docker run -it --entrypoint /bin/bash tyk-go1.16:latest
docker run --rm -p 6379:6379/tcp redis --loglevel verbose
docker exec -it d75c2f44127a bash
docker logs -f 61f65ae20280
docker stats --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}\t{{.PIDs}}\t"
docker buildx create --use --name multi-arch-builder
docker buildx build --push --platform linux/amd64,linux/arm64 -t komuw/debug:latest . # build for multiple cpus.

docker-compose up --build --force-recreate
docker-compose run --service-ports web python manage.py runserver 3000 --settings=some.settings.development
docker-compose run --service-ports --entrypoint=/bin/sh app

# golang
grep -irSn "func ([A-Za-z]\+ \*[A-Za-z]\+" vars_test.go # find all Go methods that have a pointer receiver.`
go mod tidy
goimports -w .;gofumpt -extra -w .;gofmt -w -s .;go mod tidy;go test -race ./...
go install github.com/komuw/ote@latest
go build -gcflags="all=-N -l" -trimpath -o meli cli/cli.go
go test -count=1 -tags=test_google,test_aws,test_another_tag --exec=/bin/true ./...
go test -race -tags=test_google,test_another_tag -timeout 80s github.com/komuw/meli/image -count=1 -run ^TestCreation -v

dlv exec ./meli -- -up -f testdata/docker-compose.yml 
dlv debug cli/cli.go -- -up -f testdata/docker-compose.yml
dlv debug main.go -- -someArg someArgValue   
dlv --init <(printf continue) debug main.go -- -someArg someArgValue # this one will auto-continue so that you just find yourself at the breakpoint
dlv --init <(printf break\ main.go:34\\ncontinue) debug main.go # this will set breakpoint and auto-continue
dlv --init <(printf break\ segment.go:56\\ncontinue) test -- -test.timeout 30s -test.run ^TestNewSegment$

go build -gcflags="all=-N -l" -o sir cmd/main.go
rr record ./sir -arg1
dlv replay /home/komuw/.local/share/rr/sir-0

dlv test github.com/komuw/ote --build-flags="-v --tags=test_google,test_another_tag" -- -test.run ^Test_difference -test.v ./...

dlv --init <(printf break\ server/image.go:250\\ncontinue) \
	test \
	github.com/komuw/meli/image \
	--build-flags="-v --tags=test_google,test_another_tag" \
	-- \
	-test.count=1 \
	-test.timeout 20000s \
	-test.run ^TestCreation \
	./...

dlv trace github.com/komuw/hello "someRegex" --stack 407 -- someArg --conf=hello.conf

# show stacktrace of whenever something(<some-regexp>) is called
dlv \
  trace \
  github.com/komuw/meli/image \
  "some-regexp" \
  --build-flags="-v --tags=test_google,test_another_tag" \
  --stack 203 \
  --test \
  -- \
   -test.count=1 \
  -test.timeout 20000s \
  -test.run ^TestCreation \
  ./...

rrloop(){
    #!/bin/bash
    # http://choly.ca/post/debugging-go-with-rr/
    set -x; # print command been ran
    while :
    do
      rr $@
      if [ $? -ne 0 ]; then
        echo "encountered non-zero exit code: $?";
        exit;
      fi
      set +x # remove prints
    done

    # usage:
    #   go test -gcflags 'all=-N -l' -c github.com/komuw/hello/pkg -o some.test
    #   ./rrloop.sh record --chaos some.test -test.run=TestSome
}
rrloop $@

go test -run=XXXX -bench=BenchmarkMuxNew -count=10 github.com/komuw/ong/mux > old.txt
go test -run=XXXX -bench=BenchmarkMuxNew -count=10 github.com/komuw/ong/mux > new.txt
benchstat old.txt new.txt

curl -s http://localhost:7391/debug/pprof/heap > heap.out
go tool pprof meli heap.out
go tool pprof -base old_heap.out meli new_heap.out
go tool pprof -diff_base old_heap.out meli new_heap.out
go tool pprof -normalize -base old_heap.out meli new_heap.out
go tool pprof -normalize -diff_base old_heap.out meli new_heap.out


# kubernetes
# https://kubernetes.io/docs/reference/kubectl/cheatsheet/
# lists all the resources/objects in a cluster. This resources can then be used in `kubectl get <resource>`
kubectl api-resources

# use a different kubeconfig
kubectl --kubeconfig=/path/to/kubeconfig.yaml get pods
export KUBECONFIG=/path/to/kubeconfig.yaml kubectl get pods
kubectl config view # show the kubeconfig in use
kubectl config view --raw # show whole config. You can send this to another computer and use kubectl in that computer to access the cluster.

# get pods/services
kubectl get services --all-namespaces
kubectl get pods --all-namespaces

# describe a pod
kubectl describe pod --namespace=some-ns some-pod-69d7876896-pml5q

# fetch logs(selecting by labels)
kubectl logs -f --namespace=some-ns -l app.kubernetes.io/instance=hello --all-containers=true --max-log-requests=21
kubectl logs -f --namespace=some-ns -l app.kubernetes.io/component=web --all-containers=true
kubectl logs -f --namespace=some-ns -l app.kubernetes.io/component=db --all-containers=true

# exec into a pod
kubectl exec --stdin --tty my-pod -- /bin/sh                  # 1 container case
kubectl exec --stdin --tty my-pod -c my-container -- /bin/sh  # multi-container case
kubectl exec --namespace=namespace --stdin --tty podName -- /bin/sh

# show resource usages
kubectl top pod --all-namespaces
kubectl top node

kubectl delete pod --namespace=hey my_pod

# persistent volumes & persistent-volume-claims: https://kubernetes.io/docs/concepts/storage/persistent-volumes/
kubectl get pv                                                                                 
kubectl get pvc --all-namespaces
kubectl describe pv pv-name
kubectl describe pvc --namespace=namespace name

# secrets
kubectl get secrets --all-namespaces
kubectl describe secret --namespace=namespace secret_name
kubectl get secret --namespace=foobarbaz-bingbong hello-home -o yaml
kubectl get secret --namespace=foobarbaz-bingbong hello-home --template={{.data.mongoCS}} | base64 -d

# networkPolicy
kubectl get networkpolicy --all-namespaces
kubectl get networkpolicy --namespace=foobarbaz-bingbong name
kubectl describe networkpolicy --namespace=foobarbaz-bingbong name

# endpoints
kubectl get endpoint --all-namespaces # really good to see which services map to which pods and their IPs

# get a sample yaml file quickly. This yaml file can then be used in later commands.
kubectl create deployment my-deployment --image=nginx --dry-run -o yaml

# record the command that was used to make a change.
kubectl scale deployment my-deployment --replicas=5 --record 
kubectl describe deployment my-deployment # The annotations will have the command that was recorded.

# create a pod for testing. This one has ping,telnet,wget etc already installed.
# Note; you can specify labels, namespace etc.
# eg for this case, we run it in kube-system namespace bcoz we want to test wether we can ping a pod from the kube-system NS
kubectl run --namespace=kube-system --labels="app=tester-pod,env=dev,country=kenya" tester-pod --rm -ti --image busybox /bin/sh

# media
mpv --cache=yes --cache-pause-initial=yes --cache-pause=yes https://www.youtube.com/watch?v=someCode
vlc --file-caching 10000 --network-caching 10000 https://www.youtube.com/watch?v=someCode
streamlink --player "vlc --file-caching 10000 --network-caching 10000" --default-stream "best,720p,480p" --url https://www.youtube.com/watch?v=someCode
aria2c  --check-certificate=false  --continue=true  --max-concurrent-downloads=8  --max-connection-per-server=8  --max-overall-upload-limit=10  --allow-overwrite=true  --input-file=cool.txt

yt-dlp -f mp4 --no-check-certificate --ignore-errors --no-overwrites --continue --no-post-overwrites "https://www.youtube.com/watch?v=exampleID" # youtube-dl

# start chrome with pre-flight requests disabled.
google-chrome-stable --disable-web-security --user-data-dir="/tmp"

# show all monitors
xrandr --prop
xrandr --listmonitors
# Setup monitors, where XWAYLAND2 is the built-in display.
# This also can be used to restart sleeping monitors.
xrandr --output "XWAYLAND2" --auto --output "XWAYLAND4" --left-of "XWAYLAND2" --output "XWAYLAND3" --right-of "XWAYLAND2"

# show dmesg/kernel logs
sudo dmesg --level=err,warn --nopager --human --force-prefix --ctime --time-format=iso # --kernel

journalctl -xef -n100 -u dnscrypt-proxy.service # tail logs of a systemd service/app

# -20(high priority), 19(lowest priority), 0(default)
nice -n 19 ls -lsah # start prog and assign less cpu priority
