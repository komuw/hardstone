# Taken from https://github.com/moby/moby/blob/v20.10.7/contrib/init/systemd/docker.service
# systemd docs: https://www.freedesktop.org/software/systemd/man/systemd.service.html

[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network-online.target docker.socket firewalld.service
Wants=network-online.target
Requires=docker.socket

[Service]
Type=notify
# the default is not to use systemd for cgroups because the delegate issues still
# exists and systemd currently does not support the cgroup feature set required
# for containers run by docker
# ExecStart=/usr/bin/dockerd -H fd://
# ExecStart=$(which dockerd) -H fd://
Environment="THE_DOCKERD_PATH=$(which dockerd)"
# TODO: we have hardcoded the dockerd path. This path is likely to change.
# We should ideally use something like `$(which dockerd)`; but that aint working as of now.
# Idea: run `find /nix -name "*docker*.service*"` all we need to do is symlink the docker.service file that we find
# That service file comes with the `ExecStart` set to point to the correct dockerd
ExecStart=/nix/store/r0k68p5ii8ncrsnbw87vhm5ymi36v50x-docker-28.3.2/bin/dockerd -H fd://  
ExecReload=/bin/kill -s HUP $MAINPID
LimitNOFILE=1048576
# Having non-zero Limit*s causes performance problems due to accounting overhead
# in the kernel. We recommend using cgroups to do container-local accounting.
LimitNPROC=infinity
LimitCORE=infinity

# Uncomment TasksMax if your systemd version supports it.
# Only systemd 226 and above support this version.
#TasksMax=infinity

TimeoutStartSec=0

# set delegate yes so that systemd does not reset the cgroups of docker containers
Delegate=yes

# kill only the docker process, not all processes in the cgroup
KillMode=process

# restart the docker process if it exits prematurely
Restart=on-failure

StartLimitBurst=3
StartLimitInterval=60s

[Install]
WantedBy=multi-user.target
